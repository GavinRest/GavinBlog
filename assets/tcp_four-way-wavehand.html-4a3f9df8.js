import{_ as e}from"./tcp四次挥手-81bd10ac.js";import{_ as t,p as c,q as o,a1 as p}from"./framework-5866ffd3.js";const i={},a=p('<h1 id="tcp四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp四次挥手" aria-hidden="true">#</a> tcp四次挥手</h1><blockquote><p>四次挥手：为了优雅关闭 tcp session。</p></blockquote><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><hr><ul><li>MSL（Maximum segment lifetime）： <ul><li>注意 tcp_fin_timeout 不是TIME_WAIT时间（吴功宜审校的W.Richard Stevens和Kevin R.Fall所著《TCP/IP详解 卷1:协议》中文第二版第13.5.2节称net.ipv4.tcp_fin_timeout为2MSL值）： # cat /proc/sys/net/ipv4/tcp_fin_timeout 60 tcp_fin_timeout实为FIN_WAIT_2状态的时长， Linux没有提供修改TIME_WAIT时长接口，除非修改宏的定义重新编译内核。</li></ul></li></ul><p>TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 <code>close()</code> 操作即可产生挥手操作。</p><ul><li><p>第一次挥手(FIN=1，seq=x)</p><p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p><p>发送完毕后，客户端进入 <code>FIN_WAIT_1</code> 状态。</p></li><li><p>第二次挥手(ACK=1，ACKnum=x+1)</p><p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p><p>发送完毕后，服务器端进入 <code>CLOSE_WAIT</code> 状态，客户端接收到这个确认包之后，进入 <code>FIN_WAIT_2</code> 状态，等待服务器端关闭连接。</p><ul><li><strong>注意：此时服务器可能还有没发送完的数据，待发送完毕后发送 <code>FIN</code> 包。</strong></li></ul></li><li><p>第三次挥手(FIN=1，seq=y)</p><p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p><p>发送完毕后，服务器端进入 <code>LAST_ACK</code> 状态，等待来自客户端的最后一个ACK。</p></li><li><p>第四次挥手(ACK=1，ACKnum=y+1)</p><p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 <code>TIME_WAIT</code>状态，等待可能出现的要求重传的 ACK 包。</p><p>服务器端接收到这个确认包之后，关闭连接，进入 <code>CLOSED</code> 状态。</p><p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 <code>CLOSED</code> 状态。</p></li></ul><p>四次挥手的示意图如下：</p><p><img src="'+e+'" alt="tcp四次挥手"></p>',9),l=[a];function _(d,n){return c(),o("div",null,l)}const u=t(i,[["render",_],["__file","tcp_four-way-wavehand.html.vue"]]);export{u as default};
