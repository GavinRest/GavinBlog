import{_ as t,p as a,q as d,a1 as s}from"./framework-5866ffd3.js";const e={},r=s('<h1 id="wireshark-analysis" tabindex="-1"><a class="header-anchor" href="#wireshark-analysis" aria-hidden="true">#</a> wireshark Analysis</h1><blockquote><p>https://www.wireshark.org/docs/wsug_html_chunked/ChAdvTCPAnalysis.html</p></blockquote><p>在 Packet Details面板，注意到重传报文在 SEQ/ACK Analysis 下面有些额外的信息②。这些信息是由Wireshark提供的而并非报文本身。</p><h3 id="常用排错过滤条件" tabindex="-1"><a class="header-anchor" href="#常用排错过滤条件" aria-hidden="true">#</a> 常用排错过滤条件</h3><p>对于排查网络延时/应用问题有一些过滤条件是非常有用的：</p><table><thead><tr><th>FIELD NAME</th><th>DESCRIPTION</th><th>Comments</th></tr></thead><tbody><tr><td>tcp.analysis.lost_segment</td><td>表明已经在抓包中看到不连续的序列号。报文丢失会造成重复的ACK，这会导致重传。</td><td></td></tr><tr><td>tcp.analysis.duplicate_ack</td><td>显示被确认过不止一次的报文。大凉的重复ACK是TCP端点之间高延时的迹象。</td><td></td></tr><tr><td>tcp.analysis.retransmission</td><td>显示抓包中的所有重传。如果重传次数不多的话还是正常的，过多重传可能有问题。这通常意味着应用性能缓慢和/或用户报文丢失。</td><td></td></tr><tr><td>tcp.analysis.window_update</td><td>将传输过程中的TCP window大小图形化。如果看到窗口大小下降为零，这意味着发送方已经退出了，并等待接收方确认所有已传送数据。这可能表明接收端已经不堪重负了。</td><td></td></tr><tr><td>tcp.analysis.bytes_in_flight</td><td>某一时间点网络上未确认字节数。未确认字节数不能超过你的TCP窗口大小（定义于最初3此TCP握手），为了最大化吞吐量你想要获得尽可能接近TCP窗口大小。如果看到连续低于TCP窗口大小，可能意味着报文丢失或路径上其他影响吞吐量的问题。</td><td></td></tr><tr><td>tcp.analysis.ack_rtt</td><td>衡量抓取的TCP报文与相应的ACK。如果这一时间间隔比较长那可能表示某种类型的网络延时（报文丢失，拥塞，等等）。</td><td></td></tr></tbody></table>',6),i=[r];function n(h,c){return a(),d("div",null,i)}const o=t(e,[["render",n],["__file","wireshark_analysis.html.vue"]]);export{o as default};
